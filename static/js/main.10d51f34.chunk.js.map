{"version":3,"sources":["assets/world.jpg","api/index.js","components/AutoComplete.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","fetchCountryList","a","axios","get","response","data","AutoComplete","props","onTextChange","e","value","target","suggestions","mydata","state","map","l","name","length","regex","RegExp","sort","filter","v","test","setState","text","errorInfo","showInfo","renderSuggestions","item","index","key","onChange","handleChange","onClick","selectedText","capital","region","onButtonHandle","bind","this","info","console","log","className","id","type","placeholder","data-testid","icon","faSearch","Component","App","src","worldimage","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.10d51f34.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/world.6adaa174.jpg\";","import axios from 'axios';\r\n\r\nconst url = 'https://restcountries.eu/rest/v2/all';\r\n\r\nexport const fetchCountryList = async()=>{\r\n    try {\r\n        const response = await axios.get(url);\r\n        return response.data;\r\n    } catch(error) {\r\n        return error;\r\n    }\r\n};\r\n","import React, { Component } from 'react';\r\nimport { fetchCountryList } from '../api/';\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nexport class AutoComplete extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            data: [],\r\n            suggestions:[],\r\n            text:'',\r\n            capital:'',\r\n            region:'',\r\n            showInfo: false,\r\n            errorInfo:''\r\n        }\r\n        this.onButtonHandle = this.onButtonHandle.bind(this);\r\n        this.handleChange= this.handleChange.bind(this);\r\n    }\r\n    handleChange(e) {\r\n        this.setState({ text: e.target.value });\r\n    }\r\n    onButtonHandle(){\r\n        if (this.state.text.length === 0) {\r\n            this.setState(() => ({\r\n                errorInfo: 'Please Enter a country to search'\r\n            }))\r\n        } else {\r\n            const info = this.state.data.filter(l => { return l.name === this.state.text });\r\n            this.setState(() => ({\r\n                capital: info[0].capital,\r\n                region: info[0].region,\r\n                showInfo: true\r\n            }));\r\n        }\r\n    }\r\n    onTextChange = (e) => {\r\n        const value = e.target.value;\r\n        let suggestions = [];\r\n        let mydata = this.state.data.map(l=> {return l.name});\r\n        if(value.length > 0){\r\n            const regex = new RegExp(`^${value}`, 'i');\r\n            suggestions = mydata.sort().filter(v => regex.test(v))\r\n        }\r\n        this.setState(() => ({\r\n            suggestions,\r\n            text: value,\r\n            errorInfo:'',\r\n            showInfo: false\r\n        }))\r\n    }\r\n    selectedText(value) {\r\n        this.setState(() => ({\r\n            text: value,\r\n            suggestions: [],\r\n        }))\r\n    }\r\n\r\n    renderSuggestions = () => {\r\n        let { suggestions } = this.state;\r\n        \r\n        if(suggestions.length === 0){\r\n            return null;\r\n        }\r\n        return (\r\n            <ul >\r\n                {\r\n                    suggestions.map((item, index) => (<li key={index} onChange={this.handleChange} onClick={() => this.selectedText(item)}>{item} </li>))\r\n                }\r\n            </ul>\r\n        );\r\n    }\r\n    \r\n    async componentDidMount(){\r\n        const data = await fetchCountryList();\r\n        \r\n        this.setState({data});\r\n        console.log(\"data fetched in autocomplete\",data);\r\n    }\r\n  render() {\r\n      const { text, capital, region, showInfo, errorInfo } = this.state;\r\n    return (\r\n        <div>\r\n            <div className=\"search-bar\">\r\n                <input className=\"search\" id=\"query\" type=\"text\" onChange={this.onTextChange} value={text} placeholder=\"Country\"></input>\r\n                <button className=\"search-button\" data-testid=\"search-button\" onClick={this.onButtonHandle}> <span className=\"icon\"><FontAwesomeIcon icon={faSearch} /></span></button>\r\n            </div>\r\n            <ul>{this.renderSuggestions()}</ul>\r\n\r\n            <div className={showInfo ? \"content\": \"content-hide\"}>\r\n                <ul><h2>Country Information:</h2></ul>\r\n                <li><label>Country:</label>{text}</li>\r\n                <li><label>Capital:</label>{capital}</li>\r\n                <li><label>Continent:</label>{region}</li>\r\n            </div>\r\n            {(errorInfo.length > 0) && (<p className=\"error\">{errorInfo}</p>)}\r\n        </div>  \r\n    )\r\n  }\r\n}\r\n\r\nexport default AutoComplete\r\n\r\n//TODO:\r\n//destructure the json to get more Info","import React from 'react';\nimport './App.css';\nimport {AutoComplete} from './components/AutoComplete';\nimport worldimage from './assets/world.jpg';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>The World</h1>\n        <img className=\"world-image\" src={worldimage} alt=\"world/\"/>\n      </header>\n      <AutoComplete />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}